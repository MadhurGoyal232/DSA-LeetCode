class Solution {
    public void helper(int[] candidates, int target, List<List<Integer>> ans, List<Integer> list, int sum, int start){
        int n = candidates.length;
        if(sum == target){
            ans.add(new ArrayList<>(list));
            return;
        }

        if (sum > target) return; 

        for(int i=start;i<n;i++){
            if (i > start && candidates[i] == candidates[i - 1]) continue;
            list.add(candidates[i]);
            helper(candidates,target,ans,list,sum+candidates[i], i+1);
            list.remove(list.size() -1);
            
            
        }
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
    Arrays.sort(candidates);
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        boolean isValid[] = new boolean[candidates.length];

        helper(candidates, target, ans , list,  0 , 0 );
        return ans;
        
    }
}
