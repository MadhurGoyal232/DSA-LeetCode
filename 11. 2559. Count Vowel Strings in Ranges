// class Solution {
//     public int[] vowelStrings(String[] words, int[][] queries) {
//         int arr[] = new int[queries.length];
//         int count = 0;

//         for(int i=0;i<queries.length;i++){            

//                 int x =queries[i][0];
//                 int y = queries[i][1];

//                 for(int j=x;j<=y;j++){

//                     char firstChar = words[j].charAt(0);
//                     char lastChar = words[j].charAt(words[j].length() - 1);
//                     if((firstChar== 'a' || firstChar== 'e' || firstChar== 'i' ||firstChar== 'o' ||firstChar== 'u') && (lastChar== 'a' || lastChar== 'e' || lastChar== 'i' || lastChar== 'o' || lastChar== 'u' ) ){

//                         count++;
//                     }
//                 }
//                 arr[i] = count;
//                 count = 0;


//         }

//         return arr;

        
//     }
// }


//// above code is correct but leads to time limit exceed one test case does not run.

class Solution {
    public int[] vowelStrings(String[] words, int[][] queries) {
        int[] arr = new int[queries.length]; // Output array to store answers for each query
        int[] prefixSum = new int[words.length + 1]; // Prefix sum array, size = words.length + 1

        // Step 1: Precompute the prefix sum
        for (int i = 0; i < words.length; i++) {
            // Get the first and last characters of the current word
            char firstChar = words[i].charAt(0);
            char lastChar = words[i].charAt(words[i].length() - 1);

            // Check if the word starts and ends with vowels
            if (isVowel(firstChar) && isVowel(lastChar)) {
                prefixSum[i + 1] = prefixSum[i] + 1; // Add 1 if the word is valid
            } else {
                prefixSum[i + 1] = prefixSum[i]; // Carry forward the previous sum
            }
        }

        // Step 2: Process each query using the prefix sum array
        for (int i = 0; i < queries.length; i++) {
            int li = queries[i][0]; // Starting index of the query
            int ri = queries[i][1]; // Ending index of the query

            // Calculate the count of valid words in range [li, ri]
            arr[i] = prefixSum[ri + 1] - prefixSum[li];
        }

        return arr; // Return the array of answers
    }

    // Helper method to check if a character is a vowel
    private boolean isVowel(char c) {
        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    }
}
