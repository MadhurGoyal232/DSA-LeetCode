/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {

        List<List<Integer>> result = new ArrayList<>();

        if(root == null){
            return result;
        }

        Deque<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        boolean reverse = true;;
        while(!queue.isEmpty()){

            int lsize = queue.size();

            List<Integer> list = new ArrayList<>();
            for(int i=0;i<lsize;i++){

                if(reverse){              

                    TreeNode node = queue.poll();
                    list.add(node.val); 

                    if(node.left!= null){
                        queue.add(node.left);
                    }
                    if(node.right!= null){
                        queue.add(node.right);
                    }
                }else{

                    TreeNode node = queue.pollLast();
                    list.add(node.val); 
                    if(node.right!= null){
                        queue.addFirst(node.right);
                    }

                    if(node.left!= null){
                        queue.addFirst(node.left);
                    }

                    
                }
            }
            reverse = !reverse;

            result.add(list);
        }

        return result;
        
    }
}
