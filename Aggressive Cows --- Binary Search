You are given n stalls positioned at specific distances along a straight line.Your task is to place c cows in these stalls such that the minimum distance betweeany two cows is maximized.


Input Format
The first line contains two integers n (number of stalls) and c (number of cows).
The second line contains n integers, x1, x2, …, xn, representing the positions of the stalls.

Constraints
2 ≤ n ≤ 105 (number of stalls)
2 ≤ c ≤ n (number of cows)
1 ≤ xi ≤ 109 (stall positions)
xi are guaranteed to be unique.

Output Format
Output a single integer: the maximum minimum distance between any two cows.


Sample Input
5 3
1 2 9 4 8
Sample Output
3
Explanation
The stalls are at positions [1, 2, 4, 8, 9] (sorted).. Placing the cows at positions [1, 4, 8] gives a minimum distance of 3,which is the maximum achievable.



ANswer-----------------------------------------------------------------------------------




import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input number of stalls and number of cows
        int n = sc.nextInt(); // Number of stalls
        int c = sc.nextInt(); // Number of cows

        // Input stall positions
        int[] stalls = new int[n];
        for (int i = 0; i < n; i++) {
            stalls[i] = sc.nextInt();
        }

        // Sort the stall positions
        Arrays.sort(stalls);

        // Binary search for the maximum minimum distance
        int low = 1; // Minimum possible distance
        int high = stalls[n - 1] - stalls[0]; // Maximum possible distance
        int best = 0; // To store the best answer

        while (low <= high) {
            int mid = (low + high) / 2;

            // Check if it's possible to place cows with 'mid' distance
            if (canPlaceCows(stalls, n, c, mid)) {
                best = mid; // Update the best answer
                low = mid + 1; // Try for a larger distance
            } else {
                high = mid - 1; // Try for a smaller distance
            }
        }

        // Print the result
        System.out.println(best);
    }

    /**
     * Helper method to check if we can place cows with at least 'minDist' distance
     */
    private static boolean canPlaceCows(int[] stalls, int n, int c, int minDist) {
        int count = 1; // Place the first cow in the first stall
        int lastPlacedCow = stalls[0];

        for (int i = 1; i < n; i++) {
            // If the current stall is at least 'minDist' away from the last placed cow
            if (stalls[i] - lastPlacedCow >= minDist) {
                count++;
                lastPlacedCow = stalls[i];

                // If all cows are placed, return true
                if (count == c) {
                    return true;
                }
            }
        }

        // If not all cows could be placed, return false
        return false;
    }
}
