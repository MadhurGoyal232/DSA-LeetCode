class Solution {

     public boolean isSafe(char[][] board, int row, int col){
        int n= board.length;

        for(int i=0;i<n;i++){
            // check rows
            if(board[row][i] == 'Q'){
                return false;
            }           
        }

        for(int j=0;j<n;j++){

            // check columns
            if(board[j][col] == 'Q'){
                return false;
            }
        }

        //check north east

        int i = row;
        int j = col;
        while(i>=0 && j<n){
            if(board[i][j] == 'Q'){
                return false;
            }
            i--;
            j++;
        }

        // south east

        i = row;
        j = col;

        while(i<n && j<n){
            if(board[i][j] == 'Q'){
                return false;
            }
            i++;
            j++;
        }
        
        // south west

        i = row;
        j = col;

        while(i<n && j>=0){
            if(board[i][j] == 'Q'){
                return false;
            }
            i++;
            j--;
        }

        // north west

        i = row;
        j = col;

        while(i>=0 && j>=0){
            if(board[i][j] == 'Q'){
                return false;
            }
            i--;
            j--;
        }

        return true;
    }
    public void nqueens(char[][] board, int row , int ans[]){
        int n = board.length;
        if(n == row){
            ans[0]++;
        // List<String> list = new ArrayList<>();
        //     for(int i=0;i<n;i++){
        //         String str = "";
        //         for(int j=0;j<n;j++){
        //             str+=board[i][j];
        //         }
        //         list.add(str);
        //     }
        //     ans.add(list);
            return;
        }

        for(int j=0;j<n;j++){

            if(isSafe(board,row,j)){

                board[row][j] = 'Q';
                nqueens(board,row+1,ans);
                board[row][j] = '.'; // backtracking
            }
        }

    }
    public int totalNQueens(int n) {
        char[][] board = new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j] = '.';
            }
        }
        int ans[] = {0};
        nqueens(board, 0, ans);
        return ans[0];
    }
}
