class Solution {
    public List<String> letterCombinations(String digits) {

        List<String> list = new ArrayList<>();

        if(digits.length() == 0){
            return list;
        }
        
        HashMap<Character, String> map = new HashMap<>();

        map.put('2' , "abc");
        map.put('3' , "def");
        map.put('4' , "ghi");
        map.put('5' , "jkl");
        map.put('6' , "mno");
        map.put('7' , "pqrs");
        map.put('8' , "tuv");
        map.put('9' , "wxyz");
        

        backtracking(digits,0,  map, new StringBuilder() , list);

        return list;
    }

    public static void backtracking(String digits, int i, HashMap<Character, String> map , StringBuilder sb, List<String> list){

        if(i== digits.length()){

            list.add(sb.toString());
            return;
        }
        String cur = map.get(digits.charAt(i));
        int k = cur.length();
        
        for(int j=0;j<k;j++){

            sb.append(cur.charAt(j));
            backtracking(digits, i+1,map,sb,list);
            sb.deleteCharAt(sb.length()-1);
        }

    }
}
